---
# title: "Transpositions"
# author: "Aleksander Dietrichson"
format: html
editor: visual
---

```{r}
#| include: false
knitr::opts_chunk$set(
  echo = FALSE
)
```

## Transpositions

Since the strategies and tactics learned on a i.e. 3x4 board are in principle the same as those of a 4x3 board it is useful to be able to transpose both boards and moves. We therefore implemented transpose-functions for both.

### Examples

```{r}
B <- xmas3board(2051,c(3,4))
my_move <- "A1 to B1"

```

```{r}
#| label: fig-transpositions
#| layout-ncol: 2
#| fig-cap: "Transposition example"
#| fig-subcap: ["Original","Transposed"]
#| fig-asp: 1
#| fig-width: 3
B %>% plot() %>% add_move(my_move)
transpose(B) %>% plot() %>% add_move(my_move %>% transpose_move())

```

## Windowing and Sliding

Another class of transpositions, as mentioned, are either horizontal or vertical, but does not imply a flip around the matrix's diagonal. For the avoidance of confusion I chose to denominate these operations as *sliding.* And the origin area of a *slide* a *window.*

Since we are operating on simplified sub-boards, and part of our strategy is to window the playing-board we implemented functions to *window* a board, i.e. subdivide it into smaller pieces for analysis. When moves are suggested for the sub-division we need to *slide* these moves over on the real playing board (i.e. the larger one).

### Examples

```{r}
library(xmas3)
library(ggplot2)
```

```{r}
#| label: fig-window-example
#| layout-ncol: 3
#| fig-subcap: ["Board with Window", "Moves A1xA2 and B1xA1", "Transitioned Moves"]
#| fig-cap: "Example of windowing"
#| warning: false
set.seed(200)
#B <- xmas3board(9999999999999932209486743616279764617084419440640,c(6,10))
B <- xmas3board(100000000000000,c(6,10))
p <- plot(B)
p<-p+ggplot2::annotate("rect",xmin=2,ymin=2,ymax=4,xmax=5, color="red", alpha=.2)
p

B2 <- window(B, from = c(3,3),c(2,3))
my_move <- "B1A1"
my_move2 <- "A2A1"
plot(B2) %>%
  add_move(my_move) %>% 
  add_move(my_move2)


p %>% 
  add_move(slide_move(my_move,c(3,3))) %>% 
  add_move(slide_move(my_move2,c(3,3)))
```
