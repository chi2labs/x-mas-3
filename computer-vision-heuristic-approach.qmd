---
title: "Computer Vision Heuristic Approach"
format: html
editor: visual
---

```{r}
#| include: false

library(xmas3)
library(magick)
my_data <- readr::read_csv(here::here("inst","training-data","image-classification.csv"))
```

```{r}
img <- image_read(my_data$image[1])
img
```

```{r}
library(dplyr)
my_vec <- as.raster(img)
num_colors = 16
img_1 <- image_quantize(img, max = 8)
my_vec <- as.raster(img_1)
data.frame(x = as.character(my_vec)) |> 
dplyr::count(x) |> 
  filter(n>1) |> 
  arrange(desc(n))
```

```{r}
img <- image_read(my_data$image[2])
img
```

```{r}
img_1 <- image_quantize(img, max = 8)
my_vec <- as.raster(img_1)
data.frame(x = as.character(my_vec)) |> 
dplyr::count(x) |> 
  filter(n>1) |> 
  arrange(desc(n))
```

```{r}
img <- image_read(my_data$image[10])
img
img_1 <- image_quantize(img, max = 8)
my_vec <- as.raster(img_1)
data.frame(x = as.character(my_vec)) |> 
dplyr::count(x) |> 
  filter(n>1) |> 
  arrange(desc(n))
```

```{r}
# Rounding function for colors
library(stringr)
round_colors <- function(x){
   x<-str_sub(x,1,7)
   tmp <- col2rgb(x)
   tmp <- round(tmp,digits = -1)
   rgb(t(tmp),maxColorValue = 260)
}

```

## Analyze the candy

```{r}

vectorize_and_reduce <- function(filename){
  img <- image_read(filename)
  img <- image_quantize(img, max = 8)
  my_vec <- as.raster(img) |> as.character() |> round_colors()
  data.frame(color = my_vec)
}

```

```{r}
vectorize_and_reduce(my_data$image[2]) |> 
  group_by(color) |> 
  count(sort = TRUE)
```

```{r}
vectorize_and_reduce(my_data$image[10]) |> 
  group_by(color) |> 
  count(sort = TRUE)
```

### Heuristic candy classifyer

```{r}
is_candy <- function(filename){
  purrr::map(filename,\(filename){
    vectorize_and_reduce(filename) |> 
      filter(color %in% c("#271D31","#D8454E","#F5F5F5")) ->tmp 
    
    ifelse(nrow(tmp)>5000,TRUE,FALSE)
  }) |> unlist()
}
```

```{r}
my_data$is_candy <- is_candy(my_data$image)
```

```{r}
img3 <- image_read(tmp$image[1])
img3
```

```{r}
as.raster(img3) |> as.character() -> tmp2
data.frame(x=tmp2) |> 
  group_by(x) |> 
  count(sort = TRUE)
```
